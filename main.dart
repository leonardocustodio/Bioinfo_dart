void main() {
  // CountPattern().run();
  FrequentPatterns().run();
}

class CountPattern {
  String text =
      'CGCGCAGGAGACGCGCAGCGCGCAGCGCGCAGCCACGCGCAGCCGCGCAGGGTCGCGCAGTGAGCGCGCAGGCGCGCAGGATGTTTTCGCGCAGTCCTATCGCGCACGCGCAGCGCGCAGCGCGTCCCGCGCAGATCGCGCAGCGCGCAGGCCCGCGCGCAGGCGCGCAGCACACGCGCAGCGGCGCGCAGCGCGCAGTCGCGCAGCCGCGCAGCACGCGCAGATATACGCGCAGCCAACGCGCAGCGCGCAGCGCGCAGTGCGCGCAGCTATCCAGAACGCGCAGGTCGCGCAGTTTTCTCGCGCAGCGCGCAGTCCGCGCAGATTCGCGCAGCCGCGCAGCACGCGCAGCGCCGCCGCGCAGCGCGCAGAATACGCGCAGCGCGCAGCGCGCAGAAGCGCGCAGTCTACGCGCAGCGCGCAGAGCGCGCAGCCGCGCAGTGACACGCGCAGCGCGCAGGGCGCGCAGTGCGCGCAGGCCGCGCAGCGCGCAGGATCGCGCAGACACTACACGGCCGCGCAGCCAGGACGCGCAGCCGCGCAGCGCGCAGCGCGCAGTTTACGCGCAGAAACACGCGCAGATCCGCGCAGCGCGCAGCTAGCGCGCAGCCGCGCAGCGCGCAGAACGTCCCGCGCAGCTGACGCGCAGTCCGCGCAGGCGCGCAGCGCGCAGCCGCGCAGAGCGCGCAGACTATCATGGCATGCGCGTGCCGCGCAGACCGCGCAGTCCCGCGCAGCATTTAACTGTTCCCGCGCAGCCGCGCAGCGCGCGCAGAACGCGCAGGCGCGCAGCGCGCAGTACGCGCAGACGCGCAGGCCGCGCAGACGCGCAGCGCGCAGGGGCGCGCAGTCTACGCGCAGCTCCGCGCAGCGCGCAGCGACGCGCAGAGTAGTTGTACGCGCAGAGCCGCGCAGACGCGCAGACGCGCAGATGTGCGCGCAGTAATTGCGCGCAGAGGCGCGCAGTCGCGCAGAGTCGCGCAGGCGCCCGCGCAGTGCGCGCAGCGCGCAGATGTCAGCGCGCGCAGGGCATACGCGCAGCTACCC';
  String pattern = 'CGCGCAGCG';
  int totalCount = 0;

  void run() {
    for (int i = 0; i <= text.length - pattern.length; i++) {
      var substr = text.substring(i, i + pattern.length);
      print('Sub: $substr');
      if (substr == pattern) {
        totalCount++;
      }
    }

    print('Total Count: $totalCount');
  }
}

class FrequentPatterns {
  String text =
      'TACGCAGCCCTCAGTTACGCAGCTTTACGTGTACGCAGCCCTCAGTTTTACGTGTTTACGTGTACGCAGCTTTACGTGCGGGCAATACGCAGCCCTCAGTCGCCCTATTTACGTGTACGCAGCCGCCCTACGCCCTATTTACGTGCGCCCTATTTACGTGTTTACGTGCGCCCTACCTCAGTCCTCAGTCGCCCTATTTACGTGTACGCAGCTTTACGTGCGCCCTACCTCAGTTACGCAGCTACGCAGCCGCCCTATACGCAGCCCTCAGTTACGCAGCCCTCAGTCCTCAGTCCTCAGTCCTCAGTCGGGCAATACGCAGCCCTCAGTTTTACGTGCCTCAGTCGCCCTATTTACGTGTTTACGTGCGGGCAATACGCAGCTACGCAGCCCTCAGTTACGCAGCCGCCCTACGGGCAATACGCAGCTTTACGTGTTTACGTGTACGCAGCTTTACGTGTACGCAGCCCTCAGTCGCCCTATTTACGTGTTTACGTGTTTACGTGTTTACGTGTTTACGTGCGCCCTATTTACGTGTACGCAGCCCTCAGTCCTCAGTTTTACGTGTTTACGTGTACGCAGCTACGCAGCTACGCAGCTACGCAGCCGCCCTACCTCAGTCGCCCTACGGGCAATACGCAGCCCTCAGTCGCCCTACGCCCTACCTCAGTCGGGCAACCTCAGTCGGGCAACGCCCTACGCCCTATTTACGTGCGGGCAATACGCAGCCCTCAGTCCTCAGTCGGGCAATTTACGTGTTTACGTGTTTACGTGCGCCCTACGGGCAACGCCCTACGGGCAATTTACGTGTACGCAGCCCTCAGTCGGGCAATACGCAGCTTTACGTG';
  int patternSize = 11;
  int totalCount = 0;

  void run() {
    var pattern = Map<String, int>();
    for (var i = 0; i < text.length - patternSize; i++) {
      var substr = text.substring(i, i + patternSize);
      if (pattern[substr] == null) {
        pattern[substr] = 1;
      } else {
        pattern[substr] = pattern[substr]! + 1;
      }
    }

    int max = 0;
    List<String> maxPattern = [];
    pattern.forEach((key, value) {
      if (value > max) {
        maxPattern.clear();
        maxPattern.add(key);
        max = value;
      } else if (value == max) {
        maxPattern.add(key);
      }
    });

    print('All these patterns have appear the max of $max times:');
    print('$maxPattern');
  }
}
